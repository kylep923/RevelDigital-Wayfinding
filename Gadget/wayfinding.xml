<?xml version="1.0" encoding="UTF-8" ?> 
<Module> 
<ModulePrefs title="Wayfinding Gadget" description="" author="Revel Digital" background="transparent">
  <UserPref name="dataName" display_name="Name of grid" datatype="string" default_value="" required="true" />
  <UserPref name="apiKey" display_name="Your accounts API Key" datatype="string" default_value=""/>
  <UserPref name="showButtons" display_name="Show Buttons?" datatype="bool" default_value="true"/>
     
  <!-- The following preferences should not be modified -->
  <UserPref name="ForeColor" datatype="hidden" />
  <UserPref name="BackColor" datatype="hidden" />
  <UserPref name="rdW" display_name="Width" required="true" default_value="280" datatype="hidden" />
  <UserPref name="rdH" display_name="Height" required="true" default_value="190" datatype="hidden" />
  <UserPref name="rdKey" display_name="Device Registration Key" default_value="*|DEVICE.REGISTRATIONKEY|*" datatype="hidden" />
</ModulePrefs>
<Content type="html">
<![CDATA[

<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js"></script>
<script src="https://reveldigital.github.io/reveldigital-gadgets/third-party/pathfinding-browser.min.js" type="text/javascript"></script>
<script src="https://reveldigital.github.io/reveldigital-gadgets/third-party/paper-core.min.js" type="text/javascript"></script>
<script src="https://www.gstatic.com/firebasejs/4.6.2/firebase.js"></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.8.1/slick.min.js"></script>

<script>
    // Initialize Firebase
    var config = {
        apiKey: "AIzaSyBGsq1l5bq6wNSynm7ozOjqI-0gSux0fQc",
        authDomain: "wayfinding-9f0fe.firebaseapp.com",
        databaseURL: "https://wayfinding-9f0fe.firebaseio.com",
        projectId: "wayfinding-9f0fe",
        storageBucket: "",
        messagingSenderId: "1052785583392"
    };
    firebase.initializeApp(config);
</script>
<script src="https://www.gstatic.com/firebasejs/4.6.2/firebase-database.js"></script>

<style type="text/css">
    .floatTL {
        position: absolute;
        top: 0px;
        left: 0px;
        display: block;
    }
    
    .floatTLcanvas {
        position: absolute;
        top: 0;
        left: 0;
        z-index: 10;
        width: 100%;
        height: 100%;
    }
    
    img {
        position: absolute;
        top: 0px;
        left: 0px;
        display: block;
    }
    
    .visuallyhidden {
        border: 0;
        clip: rect(0 0 0 0);
        height: 1px;
        margin: -1px;
        overflow: hidden;
        padding: 0;
        position: absolute;
        width: 1px;
    }
    
    body * {
        line-height: 1.2em;
        letter-spacing: 0;
        word-spacing: normal;
        font-family: 'Roboto', sans-serif;
    }
    
    #btnContainer {
        position: absolute;
        height: 100%;
        width: 10%;
        right: 0;
        top: 0;
        overflow: hidden;
        z-index: 50;
    }
    
    button {
        width: 95%;
        height: 50px;
    }
    
    .myCanvas {
        position: absolute;
        top: 0;
        left: 0;
        z-index: 10;
        width: 100%;
        height: 100%;
    }
    
    .store-btn {
        margin: 3%;
        font-size: 1.2em;
        border: 2px solid;
        border-radius: 10px;
    }
    
    .my-slider {
        margin-left: 2%;
        margin-right: 2%;
    }
    
    body {
        background-color: gray;
    }
    /* Slider */

.slick-slider {
    position: relative;
    display: block;
    box-sizing: border-box;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
    -webkit-touch-callout: none;
    -khtml-user-select: none;
    -ms-touch-action: pan-y;
    touch-action: pan-y;
    -webkit-tap-highlight-color: transparent;
}

.slick-list {
    position: relative;
    display: block;
    overflow: hidden;
    margin: 0;
    padding: 0;
}

.slick-list:focus {
    outline: none;
}

.slick-list.dragging {
    cursor: pointer;
    cursor: hand;
}

.slick-slider .slick-track,
.slick-slider .slick-list {
    -webkit-transform: translate3d(0, 0, 0);
    -moz-transform: translate3d(0, 0, 0);
    -ms-transform: translate3d(0, 0, 0);
    -o-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
}

.slick-track {
    position: relative;
    top: 0;
    left: 0;
    display: block;
    margin-left: auto;
    margin-right: auto;
}

.slick-track:before,
.slick-track:after {
    display: table;
    content: '';
}

.slick-track:after {
    clear: both;
}

.slick-loading .slick-track {
    visibility: hidden;
}

.slick-slide {
    display: none;
    float: left;
    height: auto;
    min-height: 1px;
}

[dir='rtl'] .slick-slide {
    float: right;
}

.slick-slide img {
    display: block;
}

.slick-slide.slick-loading img {
    display: none;
}

.slick-slide.dragging img {
    pointer-events: none;
}

.slick-initialized .slick-slide {
    display: block;
}

.slick-loading .slick-slide {
    visibility: hidden;
}

.slick-vertical .slick-slide {
    display: block;
    height: auto;
    border: 1px solid transparent;
}

.slick-arrow.slick-hidden {
    display: none;
}
.slick-loading .slick-list {
    background: #fff url('./ajax-loader.gif') center center no-repeat;
}


/* Icons */

@font-face {
    font-family: 'slick';
    font-weight: normal;
    font-style: normal;
    src: url('./fonts/slick.eot');
    /* -- THESE LINKS NEED TO BE FIXED --- */
    src: url('./fonts/slick.eot?#iefix') format('embedded-opentype'), url('./fonts/slick.woff') format('woff'), url('./fonts/slick.ttf') format('truetype'), url('./fonts/slick.svg#slick') format('svg');
}


/* Arrows */

.slick-prev,
.slick-next {
    font-size: 0;
    line-height: 0;
    position: absolute;
    top: 50%;
    display: block;
    width: 20px;
    height: 20px;
    padding: 0;
    -webkit-transform: translate(0, -50%);
    -ms-transform: translate(0, -50%);
    transform: translate(0, -50%);
    cursor: pointer;
    color: transparent;
    border: none;
    outline: none;
    background: transparent;
}

.slick-prev:hover,
.slick-prev:focus,
.slick-next:hover,
.slick-next:focus {
    color: transparent;
    outline: none;
    background: transparent;
}

.slick-prev:hover:before,
.slick-prev:focus:before,
.slick-next:hover:before,
.slick-next:focus:before {
    opacity: 1;
}

.slick-prev.slick-disabled:before,
.slick-next.slick-disabled:before {
    opacity: .25;
}

.slick-prev:before,
.slick-next:before {
    font-family: 'slick';
    font-size: 20px;
    line-height: 1;
    opacity: .75;
    color: white;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}

.slick-prev {
    left: -25px;
}

[dir='rtl'] .slick-prev {
    right: -25px;
    left: auto;
}

.slick-prev:before {
    content: '←';
}

[dir='rtl'] .slick-prev:before {
    content: '→';
}

.slick-next {
    right: -25px;
}

[dir='rtl'] .slick-next {
    right: auto;
    left: -25px;
}

.slick-next:before {
    content: '→';
}

[dir='rtl'] .slick-next:before {
    content: '←';
}


/* Dots */

.slick-dotted.slick-slider {
    margin-bottom: 30px;
}

.slick-dots {
    position: absolute;
    bottom: -25px;
    display: block;
    width: 100%;
    padding: 0;
    margin: 0;
    list-style: none;
    text-align: center;
}

.slick-dots li {
    position: relative;
    display: inline-block;
    width: 20px;
    height: 20px;
    margin: 0 5px;
    padding: 0;
    cursor: pointer;
}

.slick-dots li button {
    font-size: 0;
    line-height: 0;
    display: block;
    width: 20px;
    height: 20px;
    padding: 5px;
    cursor: pointer;
    color: transparent;
    border: 0;
    outline: none;
    background: transparent;
}

.slick-dots li button:hover,
.slick-dots li button:focus {
    outline: none;
}

.slick-dots li button:hover:before,
.slick-dots li button:focus:before {
    opacity: 1;
}

.slick-dots li button:before {
    font-family: 'slick';
    font-size: 6px;
    line-height: 20px;
    position: absolute;
    top: 0;
    left: 0;
    width: 20px;
    height: 20px;
    content: '•';
    text-align: center;
    opacity: .25;
    color: black;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}

.slick-dots li.slick-active button:before {
    opacity: .75;
    color: black;
}
</style>

<h1 id="floorHeader">Floor 1</h1>
<div id="my-slider" class="my-slider">
    <!--
    <div id="img_container" class="floatTL"></div>

    <div id="canvas_container" class="floatTLcanvas">
            <canvas id="myCanvas" resize="true"></canvas>
    -->

</div>

<div id="btnContainer">
    <img id="start" class="visuallyhidden" src="" width="24" height="24">
    <img id="end" class="visuallyhidden" src="" width="24" height="24">
    <img id="elevator" class="visuallyhidden" src="" width="24" height="24">
</div>
</div>

<script type="text/javascript">
    
    $(document).ready(function() {
        //console.log("INSIDE SCRIPT");
        $('.my-slider').slick({
            slidesToShow: 1,
            slidesToScroll: 1,
            arrows: true,
            infinite: false,
        })
    });

    var DATA = []; //Array of the grids for each floor
    var ELEVATORS; //Array of all the elevators. Each elevator contains an array of the locatons on each floor. 
    var STORES = []; //Array of store locations and the floor it is located on 
    var START; // Location of the kiosk
    var lastTimestamp = 0;
    var gridHeight = 0;
    var gridWidth = 0;
    var lastPath = [];

    var my_slider = document.getElementById("my-slider");
    var img_container = document.getElementById("img_container");
    var canvas_container = document.getElementById("canvas_container");

    var numFloors = 0;
    var changesDone = false;
    var changeFloor = false;

    //var lastStartPath;
    //var lastEndPath;
    var lastEndIcon = [];

    var originalTileSize = 0;
    var originalWidth = 0;
    var originalHeight = 0;

    var imgArray;
    var startIconURL;
    var endIconURL;

    var scope = new paper.PaperScope();

    var prefs = new gadgets.Prefs();
    var width = prefs.getString("rdW");
    width = width * .95;
    var height = prefs.getString("rdH");
    height = height * .875;
    var api_key = prefs.getString("apiKey");
    var showButtons = prefs.getBool("showButtons");
    paper.install(window);

    //window.onload = function() {
        //paper.setup('myCanvas');
        //onLoad();
    //};

    $('.my-slider').on('afterChange', function(event, slick, currentSlide, nextSlide) {
        //console.log(currentSlide);
        var curr_floor_num = parseInt($(".slick-slide.slick-current.slick-active")[0].dataset.slickIndex) + 1;
        //console.log(curr_floor_num);
        document.getElementById("floorHeader").innerText = "Floor " + curr_floor_num;
        if (curr_floor_num > 1) {
            changesDone = true;
        }
        // left
    });

    // This function is called after the gadget has been initialized.
    function onLoad() {
        readInData();
        readInStores();
        loadImage("https://uploads.cdn.reveldigital.com/378782!start24.png", "start");
        loadImage("https://uploads.cdn.reveldigital.com/378781!end24.png", "end");
        loadImage("https://uploads.cdn.reveldigital.com/381020!elevator.png", "elevator");
    }

    function loadImage(imgURL, imgID) {
        var image = document.getElementById(imgID);
        var downloadingimage = new Image();
        downloadingimage.onload = function() {
            image.src = this.src;
        }
        downloadingimage.src = imgURL;
    }

    function populateButtons(items) {
        items.forEach(function(element) {
            var btn = $("<button class='store-btn'><strong>" + element.name + "</strong></button>");
            btn.click(function() {
                generatePath(element.name);
            });
            $("#btnContainer").append(btn);

        }, this);
    }

    function hidefloors(currentFloor) {
        floorCount = DATA.length;
        for (var x = 1; x <= floorCount; x++) {
            if (x != currentFloor) {
                //console.log("floor" + x);
                TweenMax.to("#floor" + x, 2, {
                    x: +window.innerWidth,
                });
            }
        }
    }

    function removeLastPath() {
        //console.log(DATA.length);
        if (lastPath != []) {
            for (var x = 0; x < lastPath.length; x++) {
                //console.log(lastPath);
                lastPath[x].remove();
            }
            lastPath = [];
            for (var x = 0; x < lastEndIcon.length; x++) {
                //Loop through last paths and remove them
                //lastPath.remove();
                lastEndIcon[x].remove();

            }
            lastEndIcon = [];
        }
    }

    function generatePath(storeName) {
        removeLastPath();
        $('.my-slider').slick('slickGoTo', 0);

        var toX;
        var toY;
        var toFloor;
        STORES.forEach(function(element) {
            if (element.name === storeName) {
                toX = element.x;
                toY = element.y;
                toFloor = element.floor;
            }
        }, this);

        if (START.floor == toFloor) {
            //console.log(START.floor);
            //console.log(toFloor);
            $(".my-slider").slick("slickUnfilter");
            //for (var x = 2; x <= numFloors; x++) {
            //    console.log(x);
            $(".my-slider").slick("slickFilter", "#floor_" + toFloor + "_slide");
            //    //$(".my-slider").slick("slickUnfilter");
            //}
        } else {
            $(".my-slider").slick("slickUnfilter");
            $(".my-slider").slick("slickFilter", "#floor_" + START.floor + "_slide, #floor_" + toFloor + "_slide");
            //$(".my-slider").slick("slickFilter", "#floor_" + START.floor + "_slide");
        }

        var pathArray = [];
        var pathObj = {};

        for (var x = 0; x < ELEVATORS.length; x++) {
            for (var y = 0; y < ELEVATORS[x].floorAccess.length; y++) {
                // Logic to find best floor path here.
                if (START.floor == ELEVATORS[x].floorAccess[y].floor && toFloor != START.floor) {
                    path = getPath(START.x, START.y, ELEVATORS[x].floorAccess[y].x, ELEVATORS[x].floorAccess[y].y, START.floor);
                    pathArray.push(path);
                    pathObj[START.floor] = path;
                    //drawPath(path, START.floor);
                }
                if (ELEVATORS[x].floorAccess[y].floor == toFloor && toFloor != START.floor) {
                    path = getPath(ELEVATORS[x].floorAccess[y].x, ELEVATORS[x].floorAccess[y].y, toX, toY, toFloor);
                    pathArray.push(path);
                    pathObj[toFloor] = path;
                    //setTimeout(function() {
                    //$('.my-slider').slick('slickGoTo', 1);
                    //drawPath(path, toFloor);

                    // }, 3000);
                    // setTimeout(function() {
                    //drawPath(path, toFloor);
                    //  }, 4000)

                }
                if (START.floor == toFloor) {
                    path = getPath(START.x, START.y, toX, toY, toFloor);
                    pathArray.push(path);
                    pathObj[START.floor] = path;

                    //drawPath(path, START.floor);
                }
                //console.log(ELEVATORS[x].floorAccess[y]);
            }
        }
        //console.log(Object.keys(pathObj).length);

        if (Object.keys(pathObj).length > 1) {
            drawPath(pathObj[START.floor], START.floor, false, function() {
                //setTimeout(function() {
                drawPath(pathObj[toFloor], toFloor, false, function() {
                        setTimeout(function() {
                            $('.my-slider').slick('slickGoTo', 0);
                        }, 1000);
                    })
                    //}, 2000);
            });
        } else {
            drawPath(pathObj[START.floor], START.floor, true);
        }
        //lastPath = pathArray;
    }

    function alertWhenDone(msg, callback) {
        //console.log(msg);
        callback();
    }


    function drawPath(path, floor, drawEnd, callback) {
        changesDone = false;
        // setting up canvas to be drawn on and setting it as active.
        var canvas_1 = document.getElementById(floor);
        scope.setup(canvas_1);
        var view_1 = scope.View._viewsById[floor];
        view_1._project.activate();
        floor = floor - 1;
        data = path;


        scaleX = ((width / DATA[floor].scaleInfo.imgWidth) * DATA[floor].scaleInfo.tileSize);
        scaleY = ((height / DATA[floor].scaleInfo.imgHeight) * DATA[floor].scaleInfo.tileSize);
        var adjX = Math.round(scaleX / 2);
        var adjY = Math.round(scaleY / 2);

        var startX;
        var startY;
        var endX;
        var endY;
        var amount = 5;
        currentTime = 0;
        var path = new Path();
        path.strokeColor = new Color(.5, .5, 1);
        //path.strokeColor.alpha = 0;
        path.strokeWidth = 3;
        var pointArray = [];
        //path.dashArray = [10, 5];
        data.forEach(function(element) {
            if (element == data[0]) {
                startPoint = new Point((element[0] * scaleX) + adjX, (element[1] * scaleY) + adjY + -12);
            }
            if (element == data[data.length - 1]) {
                endPoint = new Point((element[0] * scaleX) + adjX, (element[1] * scaleY) + adjY + -12);
            }
            //path.add(new Point((element[0] * scaleX) + adjX, (element[1] * scaleY) + adjY));
            pointArray.push(new Point((element[0] * scaleX) + adjX, (element[1] * scaleY) + adjY));
        }, this);
        //console.log(pointArray);
        var ct = 0;
        var flag = pointArray.length;
        path.onFrame = function(event) {
            // Change the y position of the segment point:
            let time = Math.floor(event.time);
            if (pointArray.length > 0) {
                currentTime = time;
                //console.log('path', segment.path);
                setTimeout(function() {
                    if (pointArray[0]) {
                        path.add(pointArray[0]);
                        pointArray.splice(0, 1);
                        flag--;
                    }
                }, 500);
                //segment.path.strokeColor = new Color(Math.abs(sinus), Math.abs(sinus), Math.abs(sinus))
            }
            if (flag == 0 && callback && typeof(callback) === "function") {
                flag = -1;
                //console.log(flag);
                setTimeout(function() {
                    //console.log("Wait here!")
                    $('.my-slider').slick('slickGoTo', 1);
                }, 1000);
            }
            if (flag == -1 && callback && typeof(callback) === "function" && changesDone == true) {
                flag = -2;
                //console.log("drawing");
                //setTimeout(function() {
                callback();
                //}, 1000);
            }
        }
        path.smooth();
        lastPath.push(path);
        if (drawEnd == true) {
            drawStartEnd(startPoint, endPoint);
        }
        if (drawEnd == false && floor == 0) {
            drawStartElevator(startPoint, endPoint);
        }
        if (floor > 0) {
            drawElevatorEnd(startPoint, endPoint);
        }
    }


    function drawStartEnd(sp, ep) {
        var start = new Raster("start");
        start.position = sp;
        var end = new Raster("end");
        end.position = ep;
        lastEndIcon.push(end);
        lastEndIcon.push(start);
    }

    function drawStartElevator(sp, ep) {
        var start = new Raster("start");
        start.position = sp;
        var end = new Raster("elevator");
        end.position = ep;
        lastEndIcon.push(end);
        lastEndIcon.push(start);
    }

    function drawElevatorEnd(sp, ep) {
        var start = new Raster("elevator");
        start.position = sp;
        var end = new Raster("end");
        end.position = ep;
        lastEndIcon.push(end);
        lastEndIcon.push(start);
    }

    function getPath(fromX, fromY, toX, toY, floor) {
        var matrix = DATA[floor - 1].nodes.map(function(nested) {
            return nested.map(function(element) {
                return element.walkable ? 0 : 1;
            });
        });
        var grid = new PF.Grid(matrix);
        var finder = new PF.AStarFinder();
        var path = finder.findPath(fromX, fromY, toX, toY, grid);
        return path;
    }

    //------------------------------------------------------------
    // FUNCTIONS FOR READING JSON DATA FROM FIREBASE HERE
    //------------------------------------------------------------

    function readInData() {
        var building_name =prefs.getString("dataName");
        firebase.database().ref('/' + api_key + '/buildings/' + building_name).once('value').then(function(snapshot) {
            building = snapshot.val();
            var obj = JSON.parse(building.floorGrids);

            if (obj) {

                ELEVATORS = obj[0];
                //console.log(ELEVATORS);

                for (var x = 0; x < obj.length - 1; x++) {
                    DATA.push(obj[x + 1]);
                    //DATA = obj;
                    imgArray = DATA[x].imageInfo;
                    //console.log(imgArray);

                    numFloors++;

                    //var myCanvas = document.getElementById("myCanvas");
                    //myCanvas.setAttribute("style", "width: " + width + "px; height: " + height + "px;");
                    originalTileSize = DATA[x].scaleInfo.tileSize;
                    originalWidth = DATA[x].scaleInfo.imgWidth;
                    originalHeight = DATA[x].scaleInfo.imgHeight;
                    gridHeight = DATA[x].height;
                    gridWidth = DATA[x].width;
                    //console.log(DATA[x]);
                    loadGrid();
                }
                $(".my-slider").slick("slickFilter", "#floor_1_slide");
            }
            //hidefloors(1);
        });
    }


    function readInStores() {
        var building_name = prefs.getString("dataName");
        firebase.database().ref('/' + api_key + '/buildings/' + building_name).once('value').then(function(snapshot) {
            building = snapshot.val();
            var obj = JSON.parse(building.floorGrids);
            if (obj) {

                for (var x = 1; x < obj.length; x++) {
                    for (var y = 0; y < obj[x].storeInfo.length; y++) {
                        STORES.push(obj[x].storeInfo[y]);
                    }
                }

                //console.log(STORES);
                var index = STORES.map(x => x.name).indexOf('start');
                START = STORES[index];
                //console.log(START);
                STORES.splice(index, 1);
                //console.log(showButtons);
                if (showButtons == true) {
                    populateButtons(STORES);
                }
            }
        });
    }

    function sliderInit() {
        $('.my-slider').slick({
            slidesToShow: 1,
            slidesToScroll: 1,
            arrows: true
        });
    };

    //------------------------------------------------------------
    // FUNCTIONS  FOR LOADING IMAGES HERE
    //------------------------------------------------------------
    function loadGrid() {

        var slide_container = document.createElement("DIV");
        //var img_container = document.createElement("DIV");
        var canvas_container = document.createElement("DIV");

        //img_container.setAttribute("id", "img_container_" + numFloors);
        //$("#img_container" + numFloors).addClass("floatTL");
        slide_container.setAttribute("id", "floor_" + numFloors + "_slide");
        canvas_container.setAttribute("id", "canvas_container_" + numFloors);
        $("#canvas_container" + numFloors).addClass("floatTLcanvas");

        //slide_container.appendChild(img_container);
        slide_container.appendChild(canvas_container);


        var image = document.createElement("IMG");
        var canvas = document.createElement("canvas");

        canvas.setAttribute("id", numFloors);
        canvas.setAttribute("style", "width: " + width + "px; height: " + height + "px; background-image: url('" + imgArray[0] + "'); background-size:" + width + "px " + height + "px;");
        //image.setAttribute("id", "floor" + numFloors);


        //img_container.appendChild(image);
        canvas_container.appendChild(canvas);

        $("#" + numFloors).addClass("myCanvas");
        canvas = document.getElementById("'" + numFloors + "'")
        scope.setup(canvas);

        $('.my-slider').slick('slickAdd', slide_container);

    }

    function alertWhenDone(msg, callback) {
        //console.log(msg);
        callback();
    }

    //------------------------------------------------------------
    //------------------------------------------------------------


    gadgets.util.registerOnLoadHandler(onLoad);
</script>
]]>
</Content>
</Module>
